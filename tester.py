# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QListView 


# class Ui_MainWindow(object):
#     def setupUi(self, MainWindow):
#         MainWindow.setObjectName("MainWindow")
#         MainWindow.resize(800, 600)
#         self.centralwidget = QtWidgets.QWidget(MainWindow)
#         self.centralwidget.setObjectName("centralwidget")
#         self.buttonLeft = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.leftButton())
#         self.buttonLeft.setGeometry(QtCore.QRect(150, 270, 75, 24))
#         self.buttonLeft.setObjectName("buttonLeft")
#         self.listView = QtWidgets.QListView(self.centralwidget)
#         self.listView.setGeometry(QtCore.QRect(330, 20, 256, 192))
#         self.listView.setObjectName("listView")
#         self.buttonRight = QtWidgets.QPushButton(self.centralwidget)
#         self.buttonRight.setGeometry(QtCore.QRect(470, 270, 75, 24))
#         self.buttonRight.setObjectName("buttonRight")
#         self.buttonTest = QtWidgets.QPushButton(self.centralwidget)
#         self.buttonTest.setGeometry(QtCore.QRect(170, 170, 75, 24))
#         self.buttonTest.setObjectName("buttonTest")
#         MainWindow.setCentralWidget(self.centralwidget)
#         self.menubar = QtWidgets.QMenuBar(MainWindow)
#         self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
#         self.menubar.setObjectName("menubar")
#         MainWindow.setMenuBar(self.menubar)
#         self.statusbar = QtWidgets.QStatusBar(MainWindow)
#         self.statusbar.setObjectName("statusbar")
#         MainWindow.setStatusBar(self.statusbar)

#         self.retranslateUi(MainWindow)
#         QtCore.QMetaObject.connectSlotsByName(MainWindow)

#     def retranslateUi(self, MainWindow):
#         _translate = QtCore.QCoreApplication.translate
#         MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
#         self.buttonLeft.setText(_translate("MainWindow", "PushButton"))
#         self.buttonRight.setText(_translate("MainWindow", "PushButton"))
#         self.buttonTest.setText(_translate("MainWindow", "PushButton"))

class UI(QMainWindow):

    eventsAdded = 0
    userInfo = {"Activity": [], "Description": [],"Time": []}
    daysInfo = {
            "Monday": [], 
            "Tuesday": [], 
            "Wednesday": [], 
            "Thursday": [], 
            "Friday": [], 
            "Saturday": [], 
            "Sunday": []
            }

    def __init__(self):
        super(UI, self).__init__()

        #### LOAD UI FILE ####
        uic.loadUi("untitled.ui", self)

        #### ACTIONS ####

        # Submit button
        self.submitButton.clicked.connect(self.submitClicked)

        # Days of the week checkboxes
        #self.mondayBox.setChecked(True)

        #### SHOW APP ####
        self.show()
    
    def submitClicked(self):
        daysDict = {}
        activity = self.activityLineEdit.text()
        description = self.descriptionLineEdit.text()
        time = self.timeLineEdit.text()

        # Checks to see if the input is a number
        if not time.isdigit():
            # show popup for error (time is not a number)
            print("Error not a digit")
            return
        else:
            print("digit")
        
        # Checks to see what checkboxes are selected for days of the week
        #self.daysInfo.append(self.daysChecked())
        daysDict = self.daysChecked()

        # Checks to see if any of the days of the week boxes are checked
        if True not in daysDict.values():
            # Show popup for error (missing days of the week input)
            print("Days of the week missing checked")
            return

        # Checks to see if activity and description text fields have values
        if not activity or not description:
            # show popup for error (missing data)
            print("Activity or Description missing data")
            return
        else:
            # All inputs are valid
            print("{:*^30s}".format("VALID INPUTS"))

            # Appending information to previous event dictionaries
            self.userInfo["Activity"].append(activity)
            self.userInfo["Description"].append(description)
            self.userInfo["Time"].append(time)
            self.mergeDictionary(self.daysInfo, daysDict)

            # Increment amount of events to be added
            self.eventsAdded += 1

            print("Amount of Events: ", self.eventsAdded)
            print("UserInfo: ", self.userInfo)
            print("DaysInfo: ", self.daysInfo)
    
    def daysChecked(self):
        # Temp placeholder for days of the week selected
        daysDict = {
            "Monday": False, 
            "Tuesday": False, 
            "Wednesday": False, 
            "Thursday": False, 
            "Friday": False, 
            "Saturday": False, 
            "Sunday": False
            }

        # Returns boolean if each day is checked (True = checked, False = unchecked)
        daysDict["Monday"] = self.mondayBox.isChecked()
        daysDict["Tuesday"] = self.tuesdayBox.isChecked()
        daysDict["Wednesday"] = self.wednesdayBox.isChecked()
        daysDict["Thursday"] = self.thursdayBox.isChecked()
        daysDict["Friday"] = self.fridayBox.isChecked()
        daysDict["Saturday"] = self.saturdayBox.isChecked()
        daysDict["Sunday"] = self.sundayBox.isChecked()
        
        # No validation... Will always run
        # Validation done in submitClicked or other
        return daysDict
        

    def mergeDictionary(self, d1, d2):
        for i in d1:
            d1[i].append(d2[i])

        

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    UIWindow = UI()
    app.exec_()
    #test

    # app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    # MainWindow.show()
    # sys.exit(app.exec_())
